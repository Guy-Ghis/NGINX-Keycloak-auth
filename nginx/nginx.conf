events { worker_connections 1024; }

http {
  server_tokens off;
  # proxy read timeout etc
  proxy_buffering off;

  # Authentication subrequest location
  # nginx will call this for auth_request
  upstream oauth2_proxy_upstream {
    server oauth2-proxy:4180;
  }

  server {
    listen 80;
    server_name _;

    # health check endpoint
    location = /health {
      return 200 "ok\n";
    }

    # auth_request subrequest (returns 2xx if allowed)
    location = /_oauth2/auth {
      internal;
      proxy_pass http://oauth2_proxy_upstream/oauth2/auth;
      proxy_set_header Content-Length "";
      proxy_pass_request_body off;
      proxy_set_header X-Original-URI $request_uri;
      proxy_set_header X-Real-IP $remote_addr;
    }

    # protected route(s) - everything proxied to httpbin with auth_request check
    location / {
      # call subrequest to oauth2-proxy to check auth
      auth_request /_oauth2/auth;

      # when oauth2-proxy responds 401/302, nginx will return that to user
      auth_request_set $auth_status $upstream_status;
      error_page 401 = @error401;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header Host $http_host;

      proxy_pass http://httpbin:80;
    }

    location @error401 {
      return 302 http://oauth2-proxy:4180/oauth2/start?rd=$scheme://$host$request_uri;
    }

    # static files (optional)
  }
}

